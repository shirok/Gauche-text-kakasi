-*- coding: utf-8 -*-

Gauche-kakasiは漢字かな変換プログラムKAKASIのライブラリをGaucheから
使うための拡張パッケージです。

KAKASIは高橋裕信氏によって開発されたプログラムで、以下から入手可能です。
  http://kakasi.namazu.org/

[ライセンス]

libkakasiがGPLで配布されているので、Gauche-kakasiもGPLとします。

[必要なもの]

   kakasi (2.3.4 以降)
   Gauche (0.9.6 以降）

[インストール]

ungzip+untar後、configure + make + make installで既にインストール
されているGaucheのsiteライブラリディレクトリ以下にtext.kakasiモジュール
としてインストールされます。

kakasiライブラリが非標準の位置にインストールされている場合は、
configureスクリプトに--with-localオプションでそのディレクトリを
教えて下さい。例えば

  ./configure --with-local=/usr/local

とすれば、libkakasi.hを/usr/local/includeから、libkakasi.soを
/usr/local/libから探します。

[使い方]

Gauche-kakasiのAPIを使うには、text.kakasiモジュールをuseします。

  (use text.kakasi)

Gauche-kakasiは、libkakasiのAPIと直接対応する低レベルAPIと、
その上に構築された使いやすい高レベルAPIを提供しています。

低レベルAPI
----------

  詳しくはkakasiのドキュメントを参照して下さい。

  Function: kakasi-getopt-argv ARGS

     kakasi_getopt_argvに対応します。ARGSには文字列のリストを
     渡します。成功なら0、失敗なら1を返します。

  Function: kakasi-do STRING

     kakasi_doに対応します。STRINGをkakasi_doに渡し、結果の
     文字列を返します。文字列はGaucheの内部エンコーディングのまま
     渡されることに注意して下さい。

  Function: kakasi-close-kanwadict

     kakasi_close_kanwadict()に対応します。内部辞書を閉じます。
     kakasi-getopt-argvを再び呼ぶ前にこれを呼ばねばなりません。


高レベルAPI
----------

  低レベルAPIでは、kakasiを異なるオプションで何度も呼んだり
  複数のライブラリから呼ばれる可能性のある場合に、オプションの
  状態をトラッキングすることが厄介です （毎回kakasi-doを呼ぶ
  前と後にkakasi-getopt-argvとkakasi-close-kanwadictを呼ぶ
  ようにすれば安全ですが、効率が悪くなります）。 また、Gaucheの
  内部エンコーディングによってはkakasi-doとのやりとりに
  エンコーディングの変換が必要です。

  高レベルAPIはkakasiの状態管理と文字エンコーディングの変換機能を
  提供します。

  Function: kakasi-begin OPTION ... [DICT ...]
  Function: kakasi-end

     kakasiの状態をoption ...によって設定します。設定は対応する
     kakasi-endまで有効です。更に、begin/endのペアはネストする
     ことが出来ます。

     kakasiの状態の変更は低レベルライブラリを呼ぶことによって行われ
     ますが、ライブラリ内部でkakasiの状態はトラッキングされており、
     option ... が状態を変化させない場合は低レベルライブラリは呼ばれ
     ません。従って、後述のkakasi-convertを呼ぶ際に常にkakasi-begin/
     kakasi-endで囲うようにしておけば、kakasiの状態を保証し、かつ
     無駄な状態切替えを避けることができます。
     (begin/endの対応を保証するwith-kakasiマクロもあります。後述。)

     OPTION はキーワードです。各キーワードは、その名前の "-" を付加した
     kakasiのコマンドライン引数に相当します。また、OPTIONの後に追加の
     辞書名を文字列で与えることができます。

       (kakasi-begin :Ja :Ka :Ha :Ea)
         => kakasiを -Ja -Ka -Ha -Ea で呼び出すのと同じ

  Function: kakasi-convert STRING

     文字列STRINGを現在のkakasiの状態によって変換し、結果を文字列で
     返します。Gaucheの内部エンコーディングとkakasiの受け取る
     エンコーディング間の変換はkakasi-convert内で処理されます。

     (kakasi-begin :JH)
     (kakasi-convert "結果を文字列で返します。")
      => "けっかをもじれつでかえします。"
     (kakasi-end)

     (kakasi-begin :w)
     (kakasi-convert "結果を文字列で返します。")
      => "結果 を 文字列 で 返し ます 。"
     (kakasi-end)

  Macro: with-kakasi OPTIONS BODY ...

     (dynamic-wind
       (lambda () (apply kakasi-begin OPTIONS))
       (lambda () BODY ...)
       (lambda () (kakasi-end)))

  Function: kakasi-cleanup

     kakasi-endそのものはすぐにはkakasiの状態を変化させません。
     特に、オープンされた辞書は開かれたままです。何らかの理由で
     kakasiの開いている辞書を閉じたい場合はこの手続きを呼んで下さい。

  Function: kakasi-wakati STRING
  Function: kakasi-wakati-hiragana STRING
  Function: kakasi-wakati-roman STRING

     これらはwith-kakasiとkakasi-convertを使って書かれたユーティリティ
     手続きです。それぞれ、漢字かなまじり文STRINGを、わかち書き、
     ひらがなわかち書き、ローマ字わかち書きに変換し、各セグメントの
     リストにして返します。kakasi-begin/endは内部で呼ばれるので
     呼び出し側が呼ぶ必要はありません。

     (kakasi-wakati "呼び出し側が呼ぶ必要はありません。")
       => ("呼び出し" "側" "が" "呼ぶ" "必要" "はありません" "。")
     (kakasi-wakati-hiragana "呼び出し側が呼ぶ必要はありません。")
       => ("よびだし" "がわ" "が" "よぶ" "ひつよう" "はありません" "。")
     (kakasi-wakati-roman "呼び出し側が呼ぶ必要はありません。")
       => ("yobidashi" "gawa" "ga" "yobu" "hitsuyou" "haarimasen" ".")
